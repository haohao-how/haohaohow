diff --git a/build/inline-env-vars.js b/build/inline-env-vars.js
index 791bf21017959a1312f2e18a8de0e34c30623a8a..f34dca5fabc520c01b2a9504046ebf04159c2839 100644
--- a/build/inline-env-vars.js
+++ b/build/inline-env-vars.js
@@ -1,9 +1,11 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.expoInlineEnvVars = void 0;
+const getenv_1 = require("getenv");
 const debug = require('debug')('expo:babel:env-vars');
 function expoInlineEnvVars(api) {
     const { types: t } = api;
+    const strictEnvVars = (0, getenv_1.boolish)('HHH_STRICT_EXPO_ENV_VARS', false);
     function isFirstInAssign(path) {
         return t.isAssignmentExpression(path.parent) && path.parent.left === path.node;
     }
@@ -19,6 +21,9 @@ function expoInlineEnvVars(api) {
                         !isFirstInAssign(path) &&
                         key.value.startsWith('EXPO_PUBLIC_')) {
                         debug('Inlining environment variable in %s: %s', filename, key.value);
+                        if (strictEnvVars && !(key.value in process.env)) {
+                            throw new Error(`Missing environment variable ${key.value} for ${filename}`);
+                        }
                         path.replaceWith(t.valueToNode(process.env[key.value]));
                     }
                 }
